from pyrogram import filters
from pymongo import MongoClient
from CUTEXMUSIC import app
from config import MONGO_DB_URI
from pyrogram.types import *
import time
from datetime import datetime


mongo_client = MongoClient(MONGO_DB_URI)
db = mongo_client["CUTEXRANKINGS"]
collection = db["ranking"]

user_data = {}
today = {}
pic = "https://telegra.ph/file/a3ad0880b2ae3fc99a4fb.jpg"


@app.on_message(filters.group & filters.group, group=6)
def today_watcher(_, message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if chat_id in today and user_id in today[chat_id]:
        today[chat_id][user_id]["total_messages"] += 1
    else:
        if chat_id not in today:
            today[chat_id] = {}
        if user_id not in today[chat_id]:
            today[chat_id][user_id] = {"total_messages": 1}
        else:
            today[chat_id][user_id]["total_messages"] = 1

@app.on_message(filters.group & filters.group, group=11)
def _watcher(_, message):
    user_id = message.from_user.id    
    user_data.setdefault(user_id, {}).setdefault("total_messages", 0)
    user_data[user_id]["total_messages"] += 1    
    collection.update_one({"_id": user_id}, {"$inc": {"total_messages": 1}}, upsert=True)

# ------------------- ranks ------------------ #

from datetime import datetime

@app.on_message(filters.command("today"))
async def today_(_, message):
    chat_id = message.chat.id
    if chat_id in today:
        users_data = [(user_id, user_data["total_messages"]) for user_id, user_data in today[chat_id].items()]
        sorted_users_data = sorted(users_data, key=lambda x: x[1], reverse=True)[:10]

        if sorted_users_data:
            current_time = datetime.now().strftime("%d-%m-%Y")
            response = f"**üìà  ü·¥á·¥Ä·¥Ö·¥á Ä ô·¥è·¥Ä Ä·¥Ö ·¥è“ì {current_time} **\n\n"
            for idx, (user_id, total_messages) in enumerate(sorted_users_data, start=1):
                try:
                    user = await app.get_users(user_id)
                    if user:
                        user_name = user.first_name
                        user_mention = f"[{user_name}](tg://user?id={user_id})"
                    else:
                        user_mention = "Unknown"
                except:
                    user_mention = "Unknown"
                user_info = f"**{idx}**. {user_mention} ‚Ä¢ {total_messages}\n"
                response += user_info
            button = InlineKeyboardMarkup(
                [[    
                   InlineKeyboardButton("‚Ä¢ ·¥è·¥†·¥á Ä·¥Ä ü ü ‚Ä¢", callback_data="overall"),
                   InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data="close"),
                ]])
            await message.reply_photo(photo=pic, caption=response, reply_markup=button)
        else:
            await message.reply_text("No data available for today.")
    else:
        await message.reply_text("No data available for today.")



@app.on_message(filters.command("ranking"))
async def ranking(_, message):
    top_members = collection.find().sort("total_messages", -1).limit(10)
    response = f"**üìà  ü·¥á·¥Ä·¥Ö·¥á Ä ô·¥è·¥Ä Ä·¥Ö**\n\n"

    for idx, member in enumerate(top_members, start=1):
        user_id = member["_id"]
        total_messages = member["total_messages"]
        try:
            user_name = (await app.get_users(user_id)).first_name
            user_mention = f"[{user_name}](tg://user?id={user_id})"
        except:
            user_mention = "Unknown"

        user_info = f"**{idx}**. {user_mention} ‚Ä¢ {total_messages}\n"
        response += user_info 

    button = InlineKeyboardMarkup(
            [[    
               InlineKeyboardButton("‚Ä¢ ·¥õ·¥è·¥Ö·¥Ä è ‚Ä¢", callback_data="today"),
                InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data="close"),
            ]]
                                 )
    await message.reply_photo(photo=pic, caption=response, reply_markup=button)
# -------------------- regex -------------------- # 

@app.on_callback_query(filters.regex("today"))
async def today_rank(_, query):
    try:
        chat_id = query.message.chat.id
        if chat_id in today:
            users_data = [(user_id, user_data["total_messages"]) for user_id, user_data in today[chat_id].items()]
            sorted_users_data = sorted(users_data, key=lambda x: x[1], reverse=True)[:10]

            if sorted_users_data:
                current_time = datetime.now().strftime("%d-%m-%Y")
                response = f"**üìà  ü·¥á·¥Ä·¥Ö·¥á Ä ô·¥è·¥Ä Ä·¥Ö ·¥è“ì {current_time} **\n"
                for idx, (user_id, total_messages) in enumerate(sorted_users_data, start=1):
                    try:
                        user = await app.get_users(user_id)
                        if user:
                            user_name = user.first_name
                            user_mention = f"[{user_name}](tg://user?id={user_id})"
                        else:
                            user_mention = "Unknown"
                    except Exception as e:
                        print(f"Error getting user info: {e}")
                        user_mention = "Unknown"
                    user_info = f"**{idx}**. {user_mention} ‚Ä¢ {total_messages}\n"
                    response += user_info
                button = InlineKeyboardMarkup(
                    [[    
                       InlineKeyboardButton("‚Ä¢ ·¥è·¥†·¥á Ä·¥Ä ü ü ‚Ä¢", callback_data="overall"),
                       InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data=f"close"),
                    ]])
                await query.message.edit_text(response, reply_markup=button)
            else:
                await query.answer("No data available for today.")
        else:
            await query.answer("No data available for today.")
    except Exception as e:
        print(f"Error in today_rank function: {e}")

@app.on_callback_query(filters.regex("overall"))
async def overall_rank(_, query):
    try:
        top_members = collection.find().sort("total_messages", -1).limit(10)

        response = "**üìà  ü·¥á·¥Ä·¥Ö·¥á Ä ô·¥è·¥Ä Ä·¥Ö**\n"
        for idx, member in enumerate(top_members, start=1):
            user_id = member["_id"]
            total_messages = member["total_messages"]
            try:
                user_name = (await app.get_users(user_id)).first_name
                user_mention = f"[{user_name}](tg://user?id={user_id})"
            except Exception as e:
                print(f"Error getting user info: {e}")
                user_mention = "Unknown"

            user_info = f"**{idx}**. {user_mention} ‚Ä¢ {total_messages}\n"

            response += user_info

        # Add the inline buttons
        button = InlineKeyboardMarkup(
            [[    
               InlineKeyboardButton("‚Ä¢ ·¥õ·¥è·¥Ö·¥Ä è ‚Ä¢", callback_data="today"),
               InlineKeyboardButton("‚Ä¢ ·¥Ñ ü·¥ès·¥á ‚Ä¢", callback_data="close"),
            ]]
        )

        # Update the message with the overall ranking and inline buttons
        await query.message.edit_text(response, reply_markup=button)
    except Exception as e:
        print(f"Error in overall_rank function: {e}")
                
