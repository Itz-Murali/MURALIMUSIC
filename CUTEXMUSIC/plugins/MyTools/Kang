# THIS IS NOT WORKING 


import os
from asyncio import gather
from random import choice
from traceback import format_exc

from pyrogram.errors import (PeerIdInvalid, ShortnameOccupyFailed,
                             StickerEmojiInvalid, StickerPngDimensions,
                             StickerPngNopng, StickerTgsNotgs,
                             StickerVideoNowebm, UserIsBlocked)
from pyrogram.types import InlineKeyboardButton as IKB
from pyrogram.types import InlineKeyboardMarkup as IKM
from pyrogram.types import Message
from pyrogram import filters 

from CUTEXMUSIC import app, LOGGER
from CUTEXMUSIC.utils.database.cutestdb import *

@app.on_message(filters.command(["kang", "steal"]))
async def kang(c:app, m: Message):
    if not m.reply_to_message:
        return await m.reply_text(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥è Ä …™·¥ç·¥Ä…¢·¥á ·¥õ·¥è ·¥ã·¥Ä…¥…¢ …™·¥õ.")
    elif not (m.reply_to_message.animation or m.reply_to_message.sticker or m.reply_to_message.photo or (m.reply_to_message.document and m.reply_to_message.document.mime_type.split("/")[0]in["image","video"])):
        return await m.reply_text(" Ä·¥á·¥ò ü è ·¥õ·¥è ·¥Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥è Ä …™·¥ç·¥Ä…¢·¥á ·¥õ·¥è ·¥ã·¥Ä…¥…¢ …™·¥õ.")
    if not m.from_user:
        return await m.reply_text(" è·¥è·¥ú ·¥Ä Ä·¥á ·¥ú…¥·¥ã…¥·¥è·¥°…¥ “ì·¥è Ä ·¥ç·¥á, ·¥ã·¥Ä…¥…¢ s·¥õ…™·¥Ñ·¥ã·¥á Äs …™…¥ ·¥ç è ·¥ò·¥ç.")
    msg = await m.reply_text("·¥ã·¥Ä…¥…¢…™…¥…¢ s·¥õ…™·¥Ñ·¥ã·¥á Ä..")
    is_requ = False
    if m.reply_to_message.sticker:
        if m.reply_to_message.sticker.is_animated or m.reply_to_message.sticker.is_video:
            is_requ = True
    # Find the proper emoji
    args = m.text.split()
    if len(args) > 1:
        sticker_emoji = str(args[1])
    elif m.reply_to_message.sticker:
        try:
          sticker_emoji = m.reply_to_message.sticker.emoji
        except Exception:
          ran = ["ü§£", "üòë", "üòÅ", "üëç", "üî•", "üôà", "üôè", "üòç", "üòò", "üò±", "‚ò∫Ô∏è", "üôÉ", "üòå", "ü§ß", "üòê", "üò¨", "ü§©", "üòÄ", "üôÇ", "ü•π", "ü•∫", "ü´•", "üôÑ", "ü´°", "ü´†", "ü§´", "üòì", "ü•µ", "ü•∂", "üò§", "üò°", "ü§¨", "ü§Ø", "ü•¥", "ü§¢", "ü§Æ", "üíÄ", "üóø", "üí©", "ü§°", "ü´∂", "üôå", "üëê", "‚úä", "üëé", "ü´∞", "ü§å", "üëå", "üëÄ", "üíÉ", "üï∫", "üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©", "üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®","üë®‚Äç‚ù§Ô∏è‚Äçüë®", "üíë", "üë©‚Äç‚ù§Ô∏è‚Äçüë©", "üë©‚Äç‚ù§Ô∏è‚Äçüë®", "üíè", "üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®", "üò™", "üò¥", "üò≠", "ü•∏", "ü§ì", "ü´§", "üòÆ", "üòß", "üò≤", "ü•±", "üòà", "üëø", "ü§ñ", "üëæ", "üôå", "ü•¥", "ü•∞", "üòá", "ü§£" ,"üòÇ", "üòú", "üòé"]
          sticker_emoji = choice(ran)
    else:
        edit = await msg.reply_text("…¥·¥è ·¥á·¥ç·¥è·¥ä…™ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö ·¥Ñ ú·¥è·¥ès…™…¥…¢ ·¥Ä  Ä·¥Ä…¥·¥Ö·¥è·¥ç ·¥á·¥ç·¥è·¥ä…™")
        ran = ["ü§£", "üòë", "üòÅ", "üëç", "üî•", "üôà", "üôè", "üòç", "üòò", "üò±", "‚ò∫Ô∏è", "üôÉ", "üòå", "ü§ß", "üòê", "üò¨", "ü§©", "üòÄ", "üôÇ", "ü•π", "ü•∫", "ü´•", "üôÑ", "ü´°", "ü´†", "ü§´", "üòì", "ü•µ", "ü•∂", "üò§", "üò°", "ü§¨", "ü§Ø", "ü•¥", "ü§¢", "ü§Æ", "üíÄ", "üóø", "üí©", "ü§°", "ü´∂", "üôå", "üëê", "‚úä", "üëé", "ü´∞", "ü§å", "üëå", "üëÄ", "üíÉ", "üï∫", "üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©", "üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®","üë®‚Äç‚ù§Ô∏è‚Äçüë®", "üíë", "üë©‚Äç‚ù§Ô∏è‚Äçüë©", "üë©‚Äç‚ù§Ô∏è‚Äçüë®", "üíè", "üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®", "üò™", "üò¥", "üò≠", "ü•∏", "ü§ì", "ü´§", "üòÆ", "üòß", "üò≤", "ü•±", "üòà", "üëø", "ü§ñ", "üëæ", "üôå", "ü•¥", "ü•∞", "üòá", "ü§£" ,"üòÇ", "üòú", "üòé"]
        sticker_emoji = choice(ran)
        await edit.delete()
    await msg.edit_text(f"·¥ç·¥Ä·¥ã·¥á…™…¥…¢ ·¥Ä s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥°…™·¥õ ú {sticker_emoji} ·¥á·¥ç·¥è·¥ä…™")

    # Get the corresponding fileid, resize the file if necessary
    try:
        if is_requ or m.reply_to_message.animation or m.reply_to_message.video or m.reply_to_message.photo or (m.reply_to_message.document and m.reply_to_message.document.mime_type.split("/")[0] in ["video","image"]):
            # telegram doesn't allow animated and video sticker to be kanged as we do for normal stickers
            if m.reply_to_message.animation or m.reply_to_message.video or (m.reply_to_message.document and m.reply_to_message.document.mime_type.split("/")[0] == "video"):
                path = await Vsticker(c, m.reply_to_message)
                SIZE = os.path.getsize(path)
                if SIZE > 261120:
                    await m.reply_text("File is too big")
                    os.remove(path)
                    return
            elif is_requ:
                path = await m.reply_to_message.download() 
            else:
                sizee = (await get_file_size(m.reply_to_message)).split()
                if (sizee[1] == "mb" and int(sizee[0]) > 10) or sizee[1] == "gb":
                    await m.reply_text("“ì…™ ü·¥á s…™·¥¢·¥á …™s ·¥õ·¥è·¥è  ô…™…¢")
                    return
                path = await m.reply_to_message.download()
                path = await resize_file_to_sticker_size(path)
            sticker = await create_sticker(
                await upload_document(
                    c, path, m.chat.id
                ),
                sticker_emoji
            )
            os.remove(path)
        elif m.reply_to_message.sticker and not is_requ:
            sticker = await create_sticker(
                await get_document_from_file_id(
                    m.reply_to_message.sticker.file_id
                ),
                sticker_emoji
            )
        else:
          await m.reply_text("·¥ú…¥s·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥á·¥Ö…™·¥Ä “ì…™ ü·¥á...")
          return
    except ShortnameOccupyFailed:
        await m.reply_text("·¥Ñ ú·¥Ä…¥…¢·¥á  è·¥è·¥ú Ä …¥·¥Ä·¥ç·¥á ·¥è Ä ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á")
        return

    except Exception as e:
        await m.reply_text(str(e))
        e = format_exc()
        LOGGER.error(e)
        LOGGER.error(format_exc())

    # Find an available pack & add the sticker to the pack; create a new pack if needed
    # Would be a good idea to cache the number instead of searching it every single time...
    kang_lim = 120
    st_in = m.reply_to_message.sticker 
    st_type = "img"
    is_anim = is_vid = False
    if st_in:
        if st_in.is_animated:
            st_type = "ani"
            kang_lim = 50
            is_anim = True
        elif st_in.is_video:
            st_type = "vid"
            kang_lim = 50
            is_vid = True
    elif m.reply_to_message.document:
        if m.reply_to_message.document.mime_type in ["application/x-bad-tgsticker", "application/x-tgsticker"]:
            st_type = "ani"
            kang_lim = 50
            is_anim = True
        elif m.reply_to_message.document.mime_type == "video/webm":
            st_type = "vid"
            kang_lim = 50
            is_vid = True
    elif m.reply_to_message.video or m.reply_to_message.animation or (m.reply_to_message.document and m.reply_to_message.document.mime_type.split("/")[0] == "video"):
        st_type = "vid"
        kang_lim = 50
        is_vid = True
    packnum = 0
    limit = 0
    volume = 0
    packname_found = False

    try:
        while not packname_found:
            packname = f"CE{str(m.from_user.id)}{st_type}{packnum}_by_MISS_PRIYA_ROBOT"
            kangpack = f"{('@'+m.from_user.username) if m.from_user.username else m.from_user.first_name[:10]} {st_type} {('vOl '+str(volume)) if volume else ''} by @MISS_PRIYA_ROBOT"
            if limit >= 50: # To prevent this loop from running forever
                await m.reply_text("“ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ã·¥Ä…¥…¢\n ·¥ç·¥Ä è  ô·¥á  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ç·¥Ä·¥Ö·¥á ·¥ç·¥è Ä·¥á ·¥õ ú·¥Ä…¥ 50 s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò·¥Ä·¥Ñ·¥ãs ·¥°…™·¥õ ú ·¥ç·¥á ·¥õ Ä è ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ s·¥è·¥ç·¥á")
                return
            sticker_set = await get_sticker_set_by_name(c,packname)
            if not sticker_set:
                sticker_set = await create_sticker_set(
                    client=c,
                    owner=m.from_user.id,
                    title=kangpack,
                    short_name=packname,
                    stickers=[sticker],
                    animated=is_anim,
                    video=is_vid
                )
            elif sticker_set.set.count >= kang_lim:
                packnum += 1
                limit += 1
                volume += 1
                continue
            else:
                try:
                    await add_sticker_to_set(c,sticker_set,sticker)
                except StickerEmojiInvalid:
                    return await msg.edit("[ERROR]: INVALID_EMOJI_IN_ARGUMENT")
            limit += 1
            packname_found = True
        kb = IKM(
            [
                [
                    IKB(" ·¥Ä·¥Ö·¥Ö ·¥ò·¥Ä·¥Ñ·¥ã ",url=f"t.me/addstickers/{packname}")
                ]
            ]
        )
        await msg.delete()
        await m.reply_text(
            f"**·¥ã·¥Ä…¥…¢·¥á·¥Ö ·¥õ ú·¥á s·¥õ…™·¥Ñ·¥ã·¥á Ä** \n\n·¥ò·¥Ä·¥Ñ·¥ã …¥·¥Ä·¥ç·¥á: `{kangpack}`\n·¥á·¥ç·¥è·¥ä…™: {sticker_emoji}",
            reply_markup=kb
        )
    except (PeerIdInvalid, UserIsBlocked):
        keyboard = IKM(
            [[IKB("Start me first", url=f"t.me/MISS_PRIYA_ROBOT")]]
        )
        await msg.delete()
        await m.reply_text(
            " è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è s·¥õ·¥Ä Ä·¥õ ·¥Ä ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä·¥õ With ·¥ç·¥á.",
            reply_markup=keyboard,
        )
    except StickerPngNopng:
        await msg.delete()
        await m.reply_text(
            "s·¥õ…™·¥Ñ·¥ã·¥á Äs ·¥ç·¥ús·¥õ  ô·¥á ·¥ò…¥…¢ “ì…™ ü·¥ás  ô·¥ú·¥õ ·¥õ ú·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö …™·¥ç·¥Ä…¢·¥á ·¥°·¥Äs …¥·¥è·¥õ ·¥Ä ·¥ò…¥…¢"
        )
    except StickerPngDimensions:
        await msg.delete()
        await m.reply_text("·¥õ ú·¥á s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ò…¥…¢ ·¥Ö…™·¥ç·¥á…¥s…™·¥è…¥s ·¥Ä Ä·¥á …™…¥·¥†·¥Ä ü…™·¥Ö.")
    except StickerTgsNotgs:
        await msg.delete()
        await m.reply_text("s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ç·¥ús·¥õ  ô·¥á ·¥õ…¢s “ì…™ ü·¥á  ô·¥ú·¥õ ·¥õ ú·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö “ì…™ ü·¥á ·¥°·¥Äs …¥·¥è·¥õ ·¥õ…¢s")
    except StickerVideoNowebm:
        await msg.delete()
        await m.reply_text("s·¥õ…™·¥Ñ·¥ã·¥á Ä ·¥ç·¥ús·¥õ  ô·¥á ·¥°·¥á ô·¥ç “ì…™ ü·¥á  ô·¥ú·¥õ ·¥õ ú·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö “ì…™ ü·¥á ·¥°·¥Äs …¥·¥è·¥õ ·¥°·¥á ô·¥ç")
    except Exception as e:
        await msg.delete()
        await m.reply_text(f"·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö\n{e}")
        LOGGER.error(e)
        LOGGER.error(format_exc())
    return
